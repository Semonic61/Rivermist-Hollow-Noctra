name: Sync from Vanderlin
on:
  schedule:
    - cron: "0 3 * * *"   # runs daily at 3am UTC
  workflow_dispatch:       # allow manual trigger
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Noctra repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Add Vanderlin remote and fetch
        run: |
          git remote add vanderlin https://github.com/Monkestation/Vanderlin.git
          git fetch vanderlin
          git fetch origin
          
      - name: Create or update sync branch
        run: |
          # Check if sync branch exists remotely
          if git ls-remote --exit-code --heads origin sync-from-vander; then
            echo "Sync branch exists, checking it out"
            git checkout -B sync-from-vander origin/sync-from-vander
          else
            echo "Sync branch doesn't exist, creating from main"
            git checkout -b sync-from-vander origin/main
          fi
          
      - name: Smart merge with conflict detection
        id: merge_step
        run: |
          echo "=== Checking for new changes ==="
          
          # Get the last commit from vanderlin that we've merged
          last_vanderlin_commit=$(git log --grep="Sync from Vanderlin" --oneline -1 --pretty=format:"%s" | grep -o 'vanderlin/[a-f0-9]*' | cut -d'/' -f2 || echo "")
          
          if [ ! -z "$last_vanderlin_commit" ]; then
            echo "Last synced Vanderlin commit: $last_vanderlin_commit"
            # Check if there are new commits
            new_commits=$(git rev-list --count ${last_vanderlin_commit}..vanderlin/main 2>/dev/null || echo "unknown")
            echo "New commits to sync: $new_commits"
            
            if [ "$new_commits" = "0" ]; then
              echo "No new changes to sync"
              echo "merge_status=no_changes" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Attempt to merge only new changes
          vanderlin_head=$(git rev-parse vanderlin/main)
          echo "Merging up to vanderlin commit: $vanderlin_head"
          
          if git merge vanderlin/main --no-ff -m "Sync from Vanderlin: vanderlin/$vanderlin_head $(date)"; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
            echo "Merge completed successfully with no conflicts"
          else
            echo "Conflicts detected, analyzing..."
            
            # Get list of conflicted files
            conflicted_files=$(git diff --name-only --diff-filter=U)
            echo "Conflicted files: $conflicted_files"
            
            # Analyze conflicts
            real_conflicts=""
            false_conflicts=""
            
            for file in $conflicted_files; do
              echo "Analyzing conflict in: $file"
              
              # Get the content from both sides
              git show HEAD:"$file" > /tmp/ours 2>/dev/null || echo "" > /tmp/ours
              git show vanderlin/main:"$file" > /tmp/theirs 2>/dev/null || echo "" > /tmp/theirs
              
              # Compare the actual file contents
              if cmp -s /tmp/ours /tmp/theirs; then
                echo "  -> FALSE CONFLICT: Files are identical"
                false_conflicts="$false_conflicts$file\n"
                git checkout --theirs "$file"
                git add "$file"
              else
                echo "  -> REAL CONFLICT: Files have different content"
                real_conflicts="$real_conflicts$file\n"
              fi
            done
            
            # Commit resolution
            if [ -z "$(git diff --name-only --diff-filter=U)" ]; then
              git commit -m "Sync from Vanderlin: vanderlin/$vanderlin_head $(date) - auto-resolved false conflicts"
              echo "merge_status=auto_resolved" >> $GITHUB_OUTPUT
              echo "auto_resolved_files<<EOF" >> $GITHUB_OUTPUT
              echo -e "$false_conflicts" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "merge_status=conflicts" >> $GITHUB_OUTPUT
              echo "real_conflicted_files<<EOF" >> $GITHUB_OUTPUT
              echo -e "$real_conflicts" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              
              git add -A
              git commit -m "WIP: Sync from Vanderlin: vanderlin/$vanderlin_head - needs manual resolution"
            fi
          fi
          
      - name: Push sync branch
        if: steps.merge_step.outputs.merge_status != 'no_changes'
        run: |
          git push origin sync-from-vander
          
      - name: Create Pull Request
        if: steps.merge_step.outputs.merge_status != 'no_changes'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          existing_pr=$(gh pr list --base main --head sync-from-vander --json number --jq '.[0].number' || echo "")
          
          # Prepare PR body based on merge status
          if [ "${{ steps.merge_step.outputs.merge_status }}" = "conflicts" ]; then
            pr_title="CONFLICTS: Sync updates from Vanderlin"
            pr_body="**REAL MERGE CONFLICTS** - Manual resolution required.
            
            Files with conflicts: ${{ steps.merge_step.outputs.real_conflicted_files }}"
          elif [ "${{ steps.merge_step.outputs.merge_status }}" = "auto_resolved" ]; then
            pr_title="Sync updates from Vanderlin (auto-resolved)"
            pr_body="**Auto-resolved conflicts** - Ready to merge.
            
            Auto-resolved files: ${{ steps.merge_step.outputs.auto_resolved_files }}"
          else
            pr_title="Sync updates from Vanderlin"
            pr_body="**Clean merge** - No conflicts detected."
          fi

          if [ -z "$existing_pr" ]; then
            gh pr create \
              --base main \
              --head sync-from-vander \
              --title "$pr_title" \
              --body "$pr_body"
          else
            echo "PR #$existing_pr already exists, updating..."
            gh pr edit $existing_pr --title "$pr_title" --body "$pr_body"
          fi
