name: Sync from Vanderlin
on:
  schedule:
    - cron: "0 3 * * *"   # runs daily at 3am UTC
  workflow_dispatch:       # allow manual trigger
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Noctra repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Add Vanderlin remote and fetch
        run: |
          git remote add vanderlin https://github.com/Monkestation/Vanderlin.git
          git fetch vanderlin
          git fetch origin
          
      - name: Create and switch to sync branch
        run: |
          # Delete existing sync branch if it exists
          git branch -D sync-from-vander 2>/dev/null || true
          git push origin --delete sync-from-vander 2>/dev/null || true
          
          # Create fresh sync branch from current main
          git checkout -b sync-from-vander origin/main
          
      - name: Intelligent merge with real conflict detection
        id: merge_step
        run: |
          echo "=== Attempting merge with conflict resolution ==="
          
          # First, try the merge
          if git merge vanderlin/main --no-ff --allow-unrelated-histories -m "Sync from Vanderlin: $(date)"; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
            echo "Merge completed successfully with no conflicts"
          else
            echo "Conflicts detected, analyzing..."
            
            # Get list of conflicted files
            conflicted_files=$(git diff --name-only --diff-filter=U)
            echo "Raw conflicted files:"
            echo "$conflicted_files"
            
            # Now check which conflicts are REAL vs just history conflicts
            real_conflicts=""
            false_conflicts=""
            
            for file in $conflicted_files; do
              echo "Analyzing conflict in: $file"
              
              # Get the content from both sides
              git show HEAD:"$file" > /tmp/ours 2>/dev/null || echo "" > /tmp/ours
              git show vanderlin/main:"$file" > /tmp/theirs 2>/dev/null || echo "" > /tmp/theirs
              
              # Compare the actual file contents
              if cmp -s /tmp/ours /tmp/theirs; then
                echo "  -> FALSE CONFLICT: Files are identical, resolving automatically"
                false_conflicts="$false_conflicts$file\n"
                # Take their version (they're the same anyway)
                git checkout --theirs "$file"
                git add "$file"
              else
                echo "  -> REAL CONFLICT: Files have different content"
                real_conflicts="$real_conflicts$file\n"
              fi
            done
            
            # If we resolved all conflicts automatically, commit
            if [ -z "$(git diff --name-only --diff-filter=U)" ]; then
              git commit -m "Sync from Vanderlin: $(date) - auto-resolved false conflicts"
              echo "merge_status=auto_resolved" >> $GITHUB_OUTPUT
              echo "auto_resolved_files<<EOF" >> $GITHUB_OUTPUT
              echo -e "$false_conflicts" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "merge_status=conflicts" >> $GITHUB_OUTPUT
              echo "real_conflicted_files<<EOF" >> $GITHUB_OUTPUT
              echo -e "$real_conflicts" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "false_conflicts_resolved<<EOF" >> $GITHUB_OUTPUT
              echo -e "$false_conflicts" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              
              # Show detailed conflict info for real conflicts
              echo "=== REAL CONFLICTS REMAINING ==="
              for file in $(git diff --name-only --diff-filter=U); do
                echo "File: $file"
                echo "Conflict markers:"
                grep -n "^<<<<<<<\|^=======\|^>>>>>>>" "$file" | head -10
                echo "---"
              done
              
              # Add all files (including still-conflicted ones) to staging
              git add -A
              git commit -m "WIP: Sync from Vanderlin with REAL conflicts - needs manual resolution"
            fi
          fi
          
      - name: Push sync branch
        run: |
          git push origin sync-from-vander --force
          
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prepare PR body based on merge status
          if [ "${{ steps.merge_step.outputs.merge_status }}" = "conflicts" ]; then
            pr_body="This PR merges the latest changes from Vanderlin into Noctra.

           **REAL MERGE CONFLICTS DETECTED** - Manual resolution required.

          ## Files with ACTUAL conflicts (different content):
          \`\`\`
          ${{ steps.merge_step.outputs.real_conflicted_files }}
          \`\`\`"
          
            if [ ! -z "${{ steps.merge_step.outputs.false_conflicts_resolved }}" ]; then
              pr_body="$pr_body

          ## Auto-resolved false conflicts (identical files):
          \`\`\`
          ${{ steps.merge_step.outputs.false_conflicts_resolved }}
          \`\`\`"
            fi

            pr_body="$pr_body

          Auto-generated sync from GitHub Actions run #${{ github.run_number }}
          Triggered at: $(date)"
            pr_title="REAL CONFLICTS: Sync updates from Vanderlin - ${{ github.run_id }}"
            
          elif [ "${{ steps.merge_step.outputs.merge_status }}" = "auto_resolved" ]; then
            pr_body="This PR merges the latest changes from Vanderlin into Noctra.

           **All conflicts were false conflicts and have been auto-resolved.**

          ## Auto-resolved files (were identical despite git conflicts):
          \`\`\`
          ${{ steps.merge_step.outputs.auto_resolved_files }}
          \`\`\`

          Auto-generated sync from GitHub Actions run #${{ github.run_number }}
          Triggered at: $(date)"
            pr_title="Auto-resolved: Sync updates from Vanderlin - ${{ github.run_id }}"
          else
            pr_body="This PR merges the latest changes from Vanderlin into Noctra.

           **Merge completed successfully** - No conflicts detected.

          Auto-generated sync from GitHub Actions run #${{ github.run_number }}
          Triggered at: $(date)"
            pr_title="Sync updates from Vanderlin - ${{ github.run_id }}"
          fi

          # Create PR using GitHub CLI
          gh pr create \
            --base main \
            --head sync-from-vander \
            --title "$pr_title" \
            --body "$pr_body" \
            || echo "PR may already exist"
